/*
The challenge:
1) Set text to either black or white depending on the element background perceived lightness (luma)
2) Set a border as a darker variation of the base color to improve button visibility, ONLY if background luma is really high
3) Automatically generate a secondary, 60ยบ rotated hue color
*/

:root {
  /* theme color variables to use in RGB declarations */
  --red: 240;
  --green: 248;
  --blue: 255;
  /*the threshold at which colors are considered "light".
Range: decimals from 0 to 1,
recommended 0.5 - 0.6*/
  --threshold: 0.5;
  /*the threshold at which a darker border will be applied.
Range: decimals from 0 to 1,
recommended 0.8+*/
  --border-threshold: 0.8;
}

.btn {
/*sets the background for the base class*/
  background: rgb(var(--red), var(--green), var(--blue));

/*
Calcs perceived brightness using the
sRGB Luma method
lightness = (red * 0.2126 + green * 0.7152 + blue * 0.0722) / 255
*/
  --r: calc(var(--red) * 0.2126);
  --g: calc(var(--green) * 0.7152);
  --b: calc(var(--blue) * 0.0722);
  --sum: calc(var(--r) + var(--g) + var(--b));

  --perceived-lightness: calc(var(--sum) / 255);

/*
1) Any lightness value above the threshold will be considered "light", therefore apply a black text color. Any bellow will be considered dark, and use white color.
This results from appying either a sub-zero (negative) or a higher-than-100 lightness value, which are capped to 0 and 100 respectively, to a HSL declaration
*/
  color: hsl(0, 0%, calc((var(--perceived-lightness) - var(--threshold)) * -10000000%));

/*
2) sets the border as a 50% darker shade of the base color, ONLY if background color luma is higher than the border threshold.
To achieve this I use the same sub-zero or higher-than-max technique, only this time using the Alpha value from an RGBA declaration.
This results in a border that's either fully transparent or fully opaque
*/
 --border-alpha: calc((var(--perceived-lightness) - var(--border-threshold)) * 100);

  border-width: .2em;
  border-style: solid;
  border-color: rgba(calc(var(--red) - 50), calc(var(--green) - 50), calc(var(--blue) - 50), var(--border-alpha));
}

.btn--w3c{
/* Alternative calc using the
W3C luma method
lightness = (red * 0.299 + green * 0.587 + blue * 0.114) / 255
*/
  --r: calc(var(--red) * 0.299);
  --g: calc(var(--green) * 0.587);
  --b: calc(var(--blue) * 0.114);
}

.btn--secondary{
  /* 3) sets the background color as a 60ยบ rotated hue */
  filter:hue-rotate(60deg);
}

/* just basic styles*/
body{
  background: honeydew;
  padding:1rem;
  max-width: 600px;
  margin: auto;
}

.sliders{
  display:grid;
  grid-template-columns: repeat(auto-fit, minmax(150px,1fr));
  grid-gap:1em;
}

.buttons{
  display:grid;
  grid-template-columns: repeat(auto-fit, minmax(200px,1fr));
  grid-gap: 1em;
}

.buttons h2{
  grid-column: 1 / -1;
  margin-bottom:0;
}

.btn{
  padding: 1em;
  font-size: 1.5rem;
  border-radius: 0.2em;
  box-sizing: border-box;
  flex:1;
}

input[type=range]{
  display:flex;
  flex-direction:column;
  color: black;
  text-align:center;
  margin: 10px;
  font-weight:600;
}

input::before{
  content: attr(id);
  text-transform: capitalize;
}

input[id=red]::after{
  counter-reset: red var(--red);
  content: counter(red);
}

input[id=green]::after{
  counter-reset: green var(--green);
  content: counter(green);
}

input[id=blue]::after{
  counter-reset: blue var(--blue);
  content: counter(blue);
}
