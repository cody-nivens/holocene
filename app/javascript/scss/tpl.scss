// your sass here

/*
The challenge:
1) Set text to either black or white depending on the element background perceived lightness (luma)
2) Set a border as a darker variation of the base color to improve button visibility, ONLY if background luma is really high
3) Automatically generate a secondary, 60ยบ rotated hue color
*/

:root {
  /* theme color variables to use in RGB declarations */
  --red: 240;
  --green: 248;
  --blue: 255;
  /*the threshold at which colors are considered "light".
Range: decimals from 0 to 1,
recommended 0.5 - 0.6*/
  --threshold: 0.5;
  /*the threshold at which a darker border will be applied.
Range: decimals from 0 to 1,
recommended 0.8+*/
  --border-threshold: 0.8;
}

.btn {
/*sets the background for the base class*/
  background: rgb(var(--red), var(--green), var(--blue));

/*
Calcs perceived brightness using the
sRGB Luma method
lightness = (red * 0.2126 + green * 0.7152 + blue * 0.0722) / 255
*/
  --r: calc(var(--red) * 0.2126);
  --g: calc(var(--green) * 0.7152);
  --b: calc(var(--blue) * 0.0722);
  --sum: calc(var(--r) + var(--g) + var(--b));

  --perceived-lightness: calc(var(--sum) / 255);

/*
1) Any lightness value above the threshold will be considered "light", therefore apply a black text color. Any bellow will be considered dark, and use white color.
This results from appying either a sub-zero (negative) or a higher-than-100 lightness value, which are capped to 0 and 100 respectively, to a HSL declaration
*/
  color: hsl(0, 0%, calc((var(--perceived-lightness) - var(--threshold)) * -10000000%));

/*
2) sets the border as a 50% darker shade of the base color, ONLY if background color luma is higher than the border threshold.
To achieve this I use the same sub-zero or higher-than-max technique, only this time using the Alpha value from an RGBA declaration.
This results in a border that's either fully transparent or fully opaque
*/
 --border-alpha: calc((var(--perceived-lightness) - var(--border-threshold)) * 100);

  border-width: .2em;
  border-style: solid;
  border-color: rgba(calc(var(--red) - 50), calc(var(--green) - 50), calc(var(--blue) - 50), var(--border-alpha));
}

a:link, a:visited {
  --perceived-lightness: calc(var(--sum) / 255);

/*
1) Any lightness value above the threshold will be considered "light", therefore apply a black text color. Any bellow will be considered dark, and use white color.
This results from appying either a sub-zero (negative) or a higher-than-100 lightness value, which are capped to 0 and 100 respectively, to a HSL declaration
*/
  color: hsl(0, 0%, calc((var(--perceived-lightness) - var(--threshold)) * -10000000%));
}

.btn--w3c {
/* Alternative calc using the
W3C luma method
lightness = (red * 0.299 + green * 0.587 + blue * 0.114) / 255
*/
  --r: calc(var(--red) * 0.299);
  --g: calc(var(--green) * 0.587);
  --b: calc(var(--blue) * 0.114);
}

.btn-secondary{
  /* 3) sets the background color as a 60ยบ rotated hue */
  filter:hue-rotate(60deg);
}


div.alwaysbreak { page-break-before: always; }
div.nobreak:before { clear:both; }
div.nobreak { page-break-inside: avoid; }
div.page-break { display:block; clear:both; page-break-after:always; }

body {
  background: rgb(var(--red), var(--green), var(--blue));
  --r: calc(var(--red) * 0.2126);
  --g: calc(var(--green) * 0.7152);
  --b: calc(var(--blue) * 0.0722);
  --sum: calc(var(--r) + var(--g) + var(--b));

  --perceived-lightness: calc(var(--sum) / 255);

  color: hsl(0, 0%, calc((var(--perceived-lightness) - var(--threshold)) * -10000000%));

  height: 100vh;
}
html {
  position: relative;
  font-size: rem-calc(14);
}

body > .outer-container > .container {
  padding: rem-calc(15) rem-calc(15) 0;
  position: relative;
  width: rem-calc(1200);
  min-height: 100%;
  overflow-x: auto;
}

.container {
  position: relative;
  width: 100%;
  min-height: 100%;
}

body > .outer-container {
  position: relative;
  width: 100%;
  min-height: 100%;
  overflow-x: auto;
}

.footer {
  min-width: rem-calc(750);
  padding-right: 1em;
  padding-left: 1em;
  padding-bottom: 0;
  position: relative;
  bottom: 0;
  margin-bottom: 0em;
  height: rem-calc(50);
  line-height: rem-calc(50); /* Vertically center the text there */
  background-color: #f5f5f5;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  background: #fff;
  border: none;
  border-radius: 0;
  box-shadow: rem-calc(1) rem-calc(1) rem-calc(3) rgba(0, 0, 0, 0.1);
  min-height: $navbar-height; // Ensure a navbar always shows (e.g., without a .navbar-brand in collapsed mode)
  border: rem-calc(1) solid transparent;

  // Prevent floats from breaking the navbar
  @include clearfix;

  /* @media (min-width: $grid-float-breakpoint) {
    border-radius: $navbar-border-radius;
  } */

}
#content-wrap {
  flex-direction: column;
  justify-content: space-around;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  justify-content: space-around;
  height: 100%;
  margin-bottom: rem-calc(60);
}

dd {
    display: block;
    margin-left: rem-calc(40);
}
td.dd-type {
/*    display: block; */
    padding-left: rem-calc(40);
    background-color: #EEE;
}
/*p {
  padding-top: rem-calc(20);
  padding-left: rem-calc(300);
  border-style: solid;
  border-width: rem-calc(2);
}

a {
  margin-top: rem-calc(50);
}

* {
  margin: auto;
  padding: auto;
}
*/
.gtree ul {
  padding-top: rem-calc(20);
  position: relative;
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  transition: all 0.5s;
}

.gtree li {
  float: left;
  text-align: center;
  list-style-type: none;
  position: relative;
  padding: rem-calc(20) rem-calc(5) 0 rem-calc(5);
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  transition: all 0.5s;
}


/*We will use ::before and ::after to draw the connectors*/

.gtree li::before,
.gtree li::after {
  content: '';
  position: absolute;
  top: 0;
  right: 50%;
  border-top: rem-calc(1) solid #ccc;
  width: 50%;
  height: rem-calc(45);
  z-index: -1;
}

.gtree li::after {
  right: auto;
  left: 50%;
  border-left: rem-calc(1) solid #ccc;
}


/*We need to remove left-right connectors from elements without
			any siblings*/

.gtree li:only-child::after,
.gtree li:only-child::before {
  display: none;
}


/*Remove space from the top of single children*/

.gtree li:only-child {
  padding-top: 0;
}


/*Remove left connector from first child and
			right connector from last child*/

.gtree li:first-child::before,
.gtree li:last-child::after {
  border: 0 none;
}


/*Adding back the vertical connector to the last nodes*/

.gtree li:last-child::before {
  border-right: rem-calc(1) solid #ccc;
  border-radius: 0 rem-calc(5) 0 0;
  -webkit-transform: translateX(rem-calc(1));
  -moz-transform: translateX(rem-calc(1));
  transform: translateX(rem-calc(1));
  -webkit-border-radius: 0 rem-calc(5) 0 0;
  -moz-border-radius: 0 rem-calc(5) 0 0;
  border-radius: 0 rem-calc(5) 0 0;
}

.gtree li:first-child::after {
  border-radius: rem-calc(5) 0 0 0;
  -webkit-border-radius: rem-calc(5) 0 0 0;
  -moz-border-radius: rem-calc(5) 0 0 0;
}


/*Time to add downward connectors from parents*/

.gtree ul ul::before {
  content: '';
  position: absolute;
  top: -rem-calc(12);
  left: 50%;
  border-left: rem-calc(1) solid #ccc;
  width: 0;
  height: rem-calc(32);
  z-index: -1;
}

.gtree li a {
  border: rem-calc(1) solid #ccc;
  padding: rem-calc(5) rem-calc(10);
  text-decoration: none;
  color: #666;
  font-family: arial, verdana, tahoma;
  font-size: rem-calc(11);
  display: inline-block;
  background: white;
  -webkit-border-radius: rem-calc(5);
  -moz-border-radius: rem-calc(5);
  border-radius: rem-calc(5);
  -webkit-transition: all 0.5s;
  -moz-transition: all 0.5s;
  transition: all 0.5s;
}

.gtree li a+a {
  margin-left: rem-calc(20);
  position: relative;
}

.gtree li a+a::before {
  content: '';
  position: absolute;
  border-top: rem-calc(1) solid #ccc;
  top: 50%;
  left: -rem-calc(21);
  width: rem-calc(20);
}


/*Time for some hover effects*/


/*We will apply the hover effect the the lineage of the element also*/

.gtree li a:hover,
.gtree li a:hover~ul li a {
  background: #c8e4f8;
  color: #000;
  border: rem-calc(1) solid #94a0b4;
}


/*Connector styles on hover*/

.gtree li a:hover~ul li::after,
.gtree li a:hover~ul li::before,
.gtree li a:hover~ul::before,
.gtree li a:hover~ul ul::before {
  border-color: #94a0b4;
}
.flexbox {
    display: -ms-flex;
    display: -webkit-flex;
    display: flex;
    width: 100%;
}

.box_left {
    background: #a0ffa0;
    min-width: rem-calc(75);
    width: rem-calc(500);
    flex-grow: 0;
}

.box_right {
    background: #a0a0ff;
    flex-grow: 1;
}
#content {
clear: both;
width: 9rem-calc(50);
padding-bottom: rem-calc(10);
overflow:hidden;
}
#contentLeft {
float: left;
display:inline;
/* width: rem-calc(630); */
margin: rem-calc(10);
}
#contentRight {
float: right;
width: rem-calc(270);
margin-top:rem-calc(25);
margin-right:rem-calc(15);
}
div#aside {
/*  width:92%;*/
  width: rem-calc(400);
  float: right;
  overflow-x:hidden; overflow-y:visible;
  padding:2%;
  height:1rem-calc(50);
  border:rem-calc(10) double yellowgreen;
  background-color:#d7e5f7;
}
blockquote {
    display: block;
    margin-block-start: 1em;
    margin-block-end: 1em;
    margin-inline-start: rem-calc(40);
    margin-inline-end: rem-calc(40);
}
table td, table td * {
    vertical-align: top;
}
.border-primary {
  border: rem-calc(1) solid #333333;
  }
  .border-primary .card-body,.card-title {
  padding: rem-calc(3);
  margin: rem-calc(3);
}
.triangle {
    border-right: rem-calc(10) solid;
    border-bottom: rem-calc(10) solid;
    height: rem-calc(30);
    width: rem-calc(30);
    transform: rotate(-45deg);
}
.color-FF69B4 {
    background-color: #FF69B4;
}
.color-FFA500 {
    background-color: #FFA500;
    }
.color-FFD700 {
    background-color: #FFD700;
    }
.color-98FB98 {
    background-color: #98FB98;
    }
.color-AFEEEE {
    background-color: #AFEEEE;
    }
@media print {
  .hide-print {
    display: none;
  }
}
//simple_form input for rich_text_area hight
.trix-editor.form-control {
  height: auto;
}
.trix-editor {
  &.form-control {
    min-height: 20em;
    height: auto;
  }
}
.trix-content {
  height: auto;
  overflow-y: auto;
}

.customized-min-height {
    min-height: 30em;
}

dd {
    margin-bottom: rem-calc(10);
}
#tag_cloud {
  width: rem-calc(400);
  line-height: 1.6em;
  .s { font-size: 0.8em; }
  .m { font-size: 1.2em; }
  .l { font-size: 1.8em; }
}
.Progress {
    background-color: var(--color-neutral-muted,var(--color-auto-gray-2));
    border-radius: rem-calc(6);
    display: inline-flex;
    height: rem-calc(8);
    outline: rem-calc(1) solid transparent;
    overflow: hidden;
    width: rem-calc(60);
}
.Progress-item {
    outline: rem-calc(2) solid transparent;
}
.equal-spacing {
  display:flex;
  flex-direction:row;
  justify-content:space-around
}
dt > div.narrow {
    width: 2em;
    float: left;
    text-align: left;
}
dt > div.narrow-right {
    width: 2em;
    float: left;
    text-align: right;
}
dt > div.mid {
    width: 5em;
    float: left;
    text-align: left;
}
dt > div.mid-right {
    width: 5em;
    float: left;
    text-align: right;
}
dt > div.medium {
    width: 10em;
    float: left;
    text-align: left;
}
dt > div.medium-right {
    width: 6em;
    float: left;
    text-align: right;
}
dt > div.title {
    width: 30em;
    float: left;
    padding-left: 0.5em;
}
li > div.narrow {
    width: 2em;
    float: left;
    text-align: right;
}
li > div.medium-right {
    width: 6em;
    float: left;
    text-align: right;
}
li > div.medium {
    width: 6em;
    float: left;
    text-align: left;
}
li > div.title {
    width: 30em;
    float: left;
    padding-left: 0.5em;
}
dt > div.progress_bar {
    width: 5em;
    float: left;
}
.red {
    background-color: #E5BFB6;
}
.green {
    background-color: #C4E5B6;
}
.blue {
    background-color: #B6E4E5;
}
.tooltip {
  position: absolute;
  z-index: 1030;
  display: block;
  font-size: rem-calc(12);
  line-height: 1.4;
  visibility: visible;
  filter: alpha(opacity=0);
  opacity: 0;
}
.tooltip.in {
  filter: alpha(opacity=90);
  opacity: .9;
}
.tooltip.top {
  padding: rem-calc(5) 0;
  margin-top: -rem-calc(3);
}
.tooltip.right {
  padding: 0 rem-calc(5);
  margin-left: rem-calc(3);
}
.tooltip.bottom {
  padding: rem-calc(5) 0;
  margin-top: rem-calc(3);
}
.tooltip.left {
  padding: 0 rem-calc(5);
  margin-left: -rem-calc(3);
}
.tooltip-inner {
  max-width: rem-calc(200);
  padding: rem-calc(3) rem-calc(8);
  color: #fff;
  text-align: center;
  text-decoration: none;
  background-color: #000;
  border-radius: rem-calc(4);
}
.tooltip-arrow {
  position: absolute;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.tooltip.top .tooltip-arrow {
  bottom: 0;
  left: 50%;
  margin-left: -rem-calc(5);
  border-width: rem-calc(5) rem-calc(5) 0;
  border-top-color: #000;
}
.tooltip.top-left .tooltip-arrow {
  bottom: 0;
  left: rem-calc(5);
  border-width: rem-calc(5) rem-calc(5) 0;
  border-top-color: #000;
}
.tooltip.top-right .tooltip-arrow {
  right: rem-calc(5);
  bottom: 0;
  border-width: rem-calc(5) rem-calc(5) 0;
  border-top-color: #000;
}
.tooltip.right .tooltip-arrow {
  top: 50%;
  left: 0;
  margin-top: -rem-calc(5);
  border-width: rem-calc(5) rem-calc(5) rem-calc(5) 0;
  border-right-color: #000;
}
.tooltip.left .tooltip-arrow {
  top: 50%;
  right: 0;
  margin-top: -rem-calc(5);
  border-width: rem-calc(5) 0 rem-calc(5) rem-calc(5);
  border-left-color: #000;
}
.tooltip.bottom .tooltip-arrow {
  top: 0;
  left: 50%;
  margin-left: -rem-calc(5);
  border-width: 0 rem-calc(5) rem-calc(5);
  border-bottom-color: #000;
}
.tooltip.bottom-left .tooltip-arrow {
  top: 0;
  left: rem-calc(5);
  border-width: 0 rem-calc(5) rem-calc(5);
  border-bottom-color: #000;
}
.tooltip.bottom-right .tooltip-arrow {
  top: 0;
  right: rem-calc(5);
  border-width: 0 rem-calc(5) rem-calc(5);
  border-bottom-color: #000;
}
.btn-default {
    font-size: 1em;
}
.btn2 {
    display: inline-block;
    font-weight: 400;
    line-height: 1.5;
    color: #212529;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    background-color: transparent;
    border: rem-calc(1) solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1.5rem;
    border-radius: 0.25rem;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control {
    display: block;
    width: 100%;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    color: #111;
    background-color: white;
    background-clip: padding-box;
    border: rem-calc(1) solid #ced4da;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border-radius: 0.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.d-none + .breadcrumb-item::before {
    float: left;
    content: '';
}

nav + .breadcrumb, .float-left {
  position: relative;
  display: block;
  float: left;
}
